<template>

  <div class="container">
    <users-list></users-list>
  </div>
  <div class="container">
    <!-- 
      animate class be added when animateBlock is true
     -->
    <div class="block" :class="{ animate: animatedBlock }"></div>
    <button @click="animateBlock">Animate</button>
  </div>

  <!--
    Animation by Vue
    Vue를 통해 요소가 나타나고 사라지는 동작의 애니메이션을 제어할 수 있도록 해당 요소에 래핑하는
    내장 컴포넌트(전환 컴포넌트/transition component)
    
    전환 컴포넌트는 하나의 요소, 즉 하나의 직속 자식만을 가진다
    from, active, to 클래스
  -->
  <div class="container">
    <!--
      transition 컴포넌트에서 v-enter과 같은 default 이름이 아닌 커스텀 CSS 클래스 이름을 사용하는 경우
      name 속성을 통해 접두사를 명시해야 한다

      전환 이벤트)
      @before-enter: enter 애니메이션 실행 시 함께 실행 할 함수 명시
      @before-leave: leave 애니메이션 실행 시 함께 실행 할 함수 명시
      @enter: active 클래스와 동일한데, beforeEvent가 끝난 뒤 트리거되는 다음 단계라고 할 수 있음
      @after-enter: fire whenever the animation is done

      @enter-cancelled,@leave-cancelled: 애니메이션이 삭제됐을 때마다 호출되어 메서드 실행

      :css="false": 해당 transition 컴포넌트의 자식 요소는 css를 사용하지 않는다고 명시
                    JavaScript만을 사용하여 애니메이션을 제어하겠다는 의미
                    작게나마 앱의 성능을 향상시켜 준다
    -->
    <transition
      :css="false"
      name="para"
      @before-enter="beforeEnter"
      @enter="enter"
      @after-enter="afterEnter"
      @before-leave="beforeLeave"
      @leave="leave"
      @after-leave="afterLeave"
      @enter-cancelled="enterCancelled"
      @leave-cancelled="leaveCancelled"
    >
      <p v-if="paraIsVisible">This is only sometimes visible...</p>
    </transition>
    <!-- 
      커스텀 CSS 클래스 이름의 접두사가 아닌 클래스를 세부적으로 명시하고 싶은 경우
      <transition enter-from-class="..." enter-active-class="..." enter-to-class="...">
        <p v-if="paraIsVisible">This is only sometimes visible...</p>
      </transition>
     -->

    <button @click="toggleParagraph">Toggle Paragraph</button>
  </div>
  <div class="container">
    <!--
      transition 컴포넌트가 하나 이상의 자식 요소를 가지는 경우
      예외)
      transition 내의 자식 요소가 실제 DOM에서 빠지는 동시에 이를 즉시 대체하는 자식 요소가 있을 시
      하나 이상의 자식 요소를 가질 수 있음

      아래 transition 컴포넌트는 v-if/else 구문을 통해 결과적으로 하나의 자식 요소만 존재할 수 있다는 것을
      명시했기 때문에 button 태그를 두 개 사용해도 괜찮음

      mode 애니메이션 트랜지션 모드(동작 방식)를 명시한다
      in-out: 새로운 요소가 먼저 트랜지션 된 후에 현재 요소가 바뀐다
      out-in: 현재 요소의 트랜지션이 완료된 후 새로운 요소가 바뀐다
    -->
    <transition name="fade-button" mode="out-in">
      <button @click="showUser" v-if="!usersAreVisible">Show Users</button>
      <button @click="hideUser" v-else>Hi Users</button>
    </transition>
  </div>

  <!--
    base-modal 컴포넌트에 open 프로퍼티를 통해 dialogIsVisible 프로퍼티를 전달함
  -->
  <base-modal @close="hideDialog" :open="dialogIsVisible">
    <p>This is a test dialog!</p>
    <button @click="hideDialog">Close it!</button>
  </base-modal>

  <div class="container">
    <button @click="showDialog">Show Dialog</button>
  </div>
  
</template>

<script>
import UsersList from './components/UsersList.vue';

export default {
  components: {UsersList},
  data() {
    return {
      animatedBlock: false,
      dialogIsVisible: false,
      paraIsVisible: false,
      usersAreVisible: false,
      enterInterval: null,
      leaveInterval: null,
    };
  },
  methods: {
    // 전환 이벤트
    enterCancelled(el) {
      console.log(el);
      clearInterval(this.enterInterval);
    },
    leaveCancelled(el) {
      console.log(el);
      clearInterval(this.leaveInterval);
    },
    beforeEnter(el) {
      console.log('beforeEnter()');
      console.log(el);
      el.style.opacity = 0;
    },
    enter(el, done) {
      console.log('enter');
      console.log(el);
      let round = 1;
      this.enterInterval = setInterval(() => {
        el.style.opacity = round * 0.01;
        round++;
        if (round > 100) {
          clearInterval(this.enterInterval);
          /**
           * done() 함수가 인수로서 호출되어야
           * enter 훅이 끝낸 후 afterEnter 훅이 실행됨
           * done() 함수가 없으면 enter 훅이 언제 끝나는지 알 수 없어서 afterEnter 훅이 마음대로 실행됨
           * */
          done();
        }
      }, 20);
    },
    afterEnter(el) {
      console.log('afterEnter');
      console.log(el);
    },

    beforeLeave(el) {
      console.log('beforeLeave()');
      console.log(el);
      el.style.opacity = 1;
    },
    leave(el, done) {
      console.log('leave');
      console.log(el);
      let round = 1;
      this.leaveInterval = setInterval(() => {
        el.style.opacity = 1 - round * 0.01;
        round++;
        if (round > 100) {
          clearInterval(this.leaveInterval);
          done();
        }
      }, 20);
    },
    afterLeave(el) {
      console.log('afterLeave');
      console.log(el);
    },

    // 전환 이벤트

    animateBlock() {
      this.animatedBlock = true;
    },
    toggleParagraph() {
      this.paraIsVisible = !this.paraIsVisible;
    },
    showDialog() {
      this.dialogIsVisible = true;
    },
    hideDialog() {
      this.dialogIsVisible = false;
    },
    showUser() {
      this.usersAreVisible = true;
    },
    hideUser() {
      this.usersAreVisible = false;
    },
  },
};
</script>

<style>
* {
  box-sizing: border-box;
}
html {
  font-family: sans-serif;
}
body {
  margin: 0;
}
button {
  font: inherit;
  padding: 0.5rem 2rem;
  border: 1px solid #810032;
  border-radius: 30px;
  background-color: #810032;
  color: white;
  cursor: pointer;
}
button:hover,
button:active {
  background-color: #a80b48;
  border-color: #a80b48;
}
.block {
  width: 8rem;
  height: 8rem;
  background-color: #290033;
  margin-bottom: 2rem;
  /* animate 클래스에 애니메이션 효과 적용 */
  /* transition: transform 0.3s ease-out; */
}
.container {
  max-width: 40rem;
  margin: 2rem auto;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  padding: 2rem;
  border: 2px solid #ccc;
  border-radius: 12px;
}

.animate {
  /* transform: translateX(-150px); */
  animation: slide-fade 0.3s ease-out forwards;
}

/* 시작 애니메이션 */
.v-enter-from {
  /* opacity: 0;
  transform: translateY(-30px); */
}
/* 중간 애니메이션 / 시작,마지막 애니메이션 지속 시간 설정 */
.v-enter-active {
  animation: slide-scale 0.3s ease-out;
}
/* 마지막 애니메이션 */
.v-enter-to {
  /* opacity: 1;
  transform: translateY(0); */
}

.v-leave-from {
  /* opacity: 1;
  transform: translateY(0); */
}
.v-leave-active {
  /* transition: all 0.3s ease-in; */
  animation: slide-scale 0.3s ease-out;
}
.v-leave-to {
  /* opacity: 0;
  transform: translateY(-30px); */
}

.fade-button-enter-from,
.fade-button-leave-to {
  opacity: 0;
}
.fade-button-enter-active {
  transition: opacity 0.3s ease-out;
}
.fade-button-leave-active {
  transition: opacity 0.3s ease-in;
}
.fade-button-enter-to,
.fade-button-leave-from {
  opacity: 1;
}

@keyframes slide-scale {
  0% {
    transform: translateX(0) scale(1);
  }
  70% {
    transform: translateX(-120px) scale(1.1);
  }
  100% {
    transform: translateX(-150px) scale(1);
  }
}
</style>
